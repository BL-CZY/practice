<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Tracker</title>
    <script src="chart.min.js"></script>
    <script src="papaparse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 700;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .upload-section {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
            color: white;
        }
        
        .file-input-wrapper {
            position: relative;
            display: inline-block;
            margin-top: 20px;
        }
        
        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        .file-input-button {
            background: rgba(255, 255, 255, 0.2);
            border: 2px dashed rgba(255, 255, 255, 0.5);
            padding: 20px 40px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            font-weight: 600;
        }
        
        .file-input-button:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.8);
            transform: translateY(-2px);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            color: white;
            box-shadow: 0 10px 30px rgba(79, 172, 254, 0.3);
        }
        
        .stat-value {
            font-size: 2em;
            font-weight: 700;
            margin-bottom: 10px;
        }
        
        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .chart-container {
            background: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .chart-wrapper {
            position: relative;
            height: 400px;
            margin-bottom: 20px;
        }
        
        .suggestions-section {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .suggestions-title {
            font-size: 1.8em;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .suggestion-item {
            background: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
        }
        
        .suggestion-category {
            font-weight: 600;
            color: #667eea;
            margin-bottom: 5px;
        }
        
        .suggestion-text {
            color: #2c3e50;
            line-height: 1.6;
        }
        
        .category-analysis {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .category-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .category-name {
            font-weight: 600;
            color: #2c3e50;
        }
        
        .category-amount {
            font-weight: 700;
            color: #e74c3c;
        }
        
        .category-percentage {
            font-size: 0.9em;
            color: #7f8c8d;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #667eea;
        }
        
        .error {
            background: #e74c3c;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .fade-in {
            animation: fadeIn 0.5s ease-out;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ’° Expense Tracker</h1>
        
        <div class="upload-section">
            <h2>Upload Your Bank Statement CSV</h2>
            <p>Upload your CSV file to analyze spending patterns and get personalized suggestions</p>
            <div class="file-input-wrapper">
                <input id="csvFile"  />
                <div class="file-input-button">
                    ï¿½ Choose CSV File
                </div>
            </div>
        </div>
        
        <div id="error-container"></div>
        
        <div id="stats-section" class="stats-grid" style="display: none;">
            <div class="stat-card">
                <div class="stat-value" id="totalExpenses">â‚¬0.00</div>
                <div class="stat-label">Total Expenses</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalIncome">â‚¬0.00</div>
                <div class="stat-label">Total Income</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="avgDaily">â‚¬0.00</div>
                <div class="stat-label">Avg Daily Spending</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="transactionCount">0</div>
                <div class="stat-label">Transactions</div>
            </div>
        </div>
        
        <div id="chart-section" class="chart-container" style="display: none;">
            <h3>ðŸ“ˆ Daily Spending Trend</h3>
            <div class="chart-wrapper">
                <canvas id="trendChart"></canvas>
            </div>
        </div>
        
        <div id="suggestions-section" class="suggestions-section" style="display: none;">
            <h3 class="suggestions-title">ðŸ¤– AI-Powered Suggestions</h3>
            <div id="suggestions-container"></div>
        </div>
        
        <div id="category-section" class="category-analysis" style="display: none;">
            <h3>ðŸ“Š Spending by Category</h3>
            <div class="chart-wrapper" style="margin-bottom: 30px;">
                <canvas id="categoryChart"></canvas>
            </div>
            <div id="category-container"></div>
        </div>
    </div>

    <script>
        let transactionData = [];
        let trendChart = null;
        let categoryChart = null;
        
        // Debug logging
        console.log('Script loaded successfully');
        
        // Check if libraries are loaded
        if (typeof Papa === 'undefined') {
            console.error('PapaParse library not loaded!');
            document.getElementById('error-container').innerHTML = '<div class="error">PapaParse library failed to load. Please check if papaparse.min.js is in the extension folder.</div>';
        } else {
            console.log('PapaParse loaded successfully');
        }
        
        if (typeof Chart === 'undefined') {
            console.error('Chart.js library not loaded!');
            document.getElementById('error-container').innerHTML = '<div class="error">Chart.js library failed to load. Please check if chart.min.js is in the extension folder.</div>';
        } else {
            console.log('Chart.js loaded successfully');
        }
        
        // File upload handler
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded');
            
            const fileInput = document.getElementById('csvFile');
            const fileButton = document.querySelector('.file-input-button');
            
            if (!fileInput) {
                console.error('File input not found!');
                return;
            }
            
            // Add click handler to the button
            fileButton.addEventListener('click', function() {
                console.log('File button clicked');
                fileInput.click();
            });
            
            // Add change handler to the input
            fileInput.addEventListener('change', function(e) {
                console.log('File input changed');
                const file = e.target.value;
                if (file) {
                    console.log('File selected:', file.name, 'Size:', file.size, 'Type:', file.type);
                    
                    // Show loading message
                    document.getElementById('error-container').innerHTML = '<div class="loading">Processing your CSV file...</div>';
                    
                    // Add a small delay to ensure UI updates
                    setTimeout(() => {
                        parseCSV(file);
                    }, 100);
                } else {
                    console.log('No file selected');
                }
            });
            
            console.log('Event listeners attached successfully');
        });
        
        function parseCSV(file) {
            console.log('Starting CSV parsing for file:', file.name);
            
            // Check if Papa is available
            if (typeof Papa === 'undefined') {
                showError('PapaParse library is not loaded. Please ensure papaparse.min.js is in your extension folder.');
                return;
            }
            
            // Use FileReader as fallback for Chrome extension environment
            
                
                try {
                    Papa.parse(file, {
                        header: true,
                        dynamicTyping: true,
                        skipEmptyLines: true,
                        delimitersToGuess: [',', '\t', '|', ';'],
                        complete: function(results) {
                            console.log('CSV parsed successfully:', results);
                            processParsedData(results);
                        },
                        error: function(error) {
                            console.error('Papa Parse error:', error);
                            showError('Error parsing CSV: ' + error.message);
                        }
                    });
                } catch (error) {
                    console.error('Error in Papa.parse:', error);
                    showError('Error parsing CSV: ' + error.message);
                }


            reader.onerror = function() {
                console.error('FileReader error');
                showError('Error reading file. Please try again.');
            };
            
            reader.readAsText(file);
        }
        
        function processParsedData(results) {
            console.log('Processing parsed data...');
            
            try {
                // Handle both indexed and named headers
                const data = results.data;
                console.log('Raw data sample:', data[0]);
                console.log('Data length:', data.length);
                
                if (!data || data.length === 0) {
                    showError('CSV file appears to be empty.');
                    return;
                }
                
                transactionData = data.map((row, index) => {
                    try {
                        // Handle different possible column names
                        const date = row.date || row.Date || row.DATE;
                        const description = row.description || row.Description || row.DESCRIPTION || '';
                        const amount = parseFloat(row.amount || row.Amount || row.AMOUNT || 0);
                        const type = row.type || row.Type || row.TYPE || 'debit';
                        const currency = row.currency || row.Currency || row.CURRENCY || 'EUR';
                        
                        const parsedDate = new Date(date);
                        
                        if (index < 3) {
                            console.log(`Row ${index}:`, {
                                original: row,
                                parsed: { date: parsedDate, description, amount, type, currency }
                            });
                        }
                        
                        return {
                            date: parsedDate,
                            description: description,
                            amount: amount,
                            type: type,
                            currency: currency
                        };
                    } catch (error) {
                        console.error('Error processing row:', row, error);
                        return null;
                    }
                }).filter(row => {
                    if (!row) return false;
                    const isValid = row.date && !isNaN(row.date.getTime()) && !isNaN(row.amount) && row.amount !== 0;
                    if (!isValid) {
                        console.log('Filtered out invalid row:', row);
                    }
                    return isValid;
                });
                
                console.log('Processed transactions:', transactionData.length);
                
                if (transactionData.length === 0) {
                    showError('No valid transaction data found in the CSV file. Please check that your CSV has columns: date, description, amount, type, currency');
                    return;
                }
                
                // Sort by date
                transactionData.sort((a, b) => a.date - b.date);
                
                // Process data
                console.log('Starting data processing...');
                updateStats();
                createTrendChart();
                categorizeTransactions();
                generateSuggestions();
                
                // Show sections with animation
                const sections = [
                    'stats-section',
                    'chart-section', 
                    'suggestions-section',
                    'category-section'
                ];
                
                sections.forEach((sectionId, index) => {
                    setTimeout(() => {
                        const section = document.getElementById(sectionId);
                        if (sectionId === 'stats-section') {
                            section.style.display = 'grid';
                        } else {
                            section.style.display = 'block';
                        }
                        section.classList.add('fade-in');
                        console.log(`Showing section: ${sectionId}`);
                    }, index * 200);
                });
                
                // Clear any loading messages
                document.getElementById('error-container').innerHTML = '';
                
                console.log('All processing complete!');
                
            } catch (error) {
                console.error('Error processing CSV data:', error);
                showError('Error processing CSV: ' + error.message);
            }
        }
        
        function showError(message) {
            console.error('Error:', message);
            const errorContainer = document.getElementById('error-container');
            errorContainer.innerHTML = `<div class="error">${message}</div>`;
            setTimeout(() => {
                errorContainer.innerHTML = '';
            }, 8000);
        }
        
        function updateStats() {
            const expenses = transactionData.filter(t => t.type === 'debit').reduce((sum, t) => sum + Math.abs(t.amount), 0);
            const income = transactionData.filter(t => t.type === 'credit').reduce((sum, t) => sum + t.amount, 0);
            const avgDaily = expenses / Math.max(1, getDaysBetween(transactionData[0].date, transactionData[transactionData.length - 1].date));
            
            document.getElementById('totalExpenses').textContent = `â‚¬${expenses.toFixed(2)}`;
            document.getElementById('totalIncome').textContent = `â‚¬${income.toFixed(2)}`;
            document.getElementById('avgDaily').textContent = `â‚¬${avgDaily.toFixed(2)}`;
            document.getElementById('transactionCount').textContent = transactionData.length;
        }
        
        function getDaysBetween(date1, date2) {
            const diffTime = Math.abs(date2 - date1);
            return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) || 1;
        }
        
        function createTrendChart() {
            const ctx = document.getElementById('trendChart').getContext('2d');
            
            // Group transactions by date
            const dailyTotals = {};
            transactionData.forEach(t => {
                const dateStr = t.date.toISOString().split('T')[0];
                if (!dailyTotals[dateStr]) {
                    dailyTotals[dateStr] = 0;
                }
                if (t.type === 'debit') {
                    dailyTotals[dateStr] += Math.abs(t.amount);
                }
            });
            
            const dates = Object.keys(dailyTotals).sort();
            const amounts = dates.map(date => dailyTotals[date]);
            
            if (trendChart) {
                trendChart.destroy();
            }
            
            trendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates.map(date => new Date(date).toLocaleDateString()),
                    datasets: [{
                        label: 'Daily Spending (â‚¬)',
                        data: amounts,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#667eea',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return 'â‚¬' + value.toFixed(2);
                                }
                            }
                        }
                    }
                }
            });
        }
        
        function categorizeTransactions() {
            const categories = {};
            
            transactionData.filter(t => t.type === 'debit').forEach(t => {
                const category = getCategory(t.description);
                if (!categories[category]) {
                    categories[category] = 0;
                }
                categories[category] += Math.abs(t.amount);
            });
            
            const totalExpenses = Object.values(categories).reduce((sum, amount) => sum + amount, 0);
            const sortedCategories = Object.entries(categories).sort((a, b) => b[1] - a[1]);
            
            // Create pie chart
            createCategoryChart(sortedCategories);
            
            // Create category list
            const container = document.getElementById('category-container');
            container.innerHTML = sortedCategories.map(([category, amount]) => {
                const percentage = ((amount / totalExpenses) * 100).toFixed(1);
                return `
                    <div class="category-item">
                        <div>
                            <div class="category-name">${category}</div>
                            <div class="category-percentage">${percentage}% of total</div>
                        </div>
                        <div class="category-amount">â‚¬${amount.toFixed(2)}</div>
                    </div>
                `;
            }).join('');
        }
        
        function createCategoryChart(sortedCategories) {
            const ctx = document.getElementById('categoryChart').getContext('2d');
            
            const colors = [
                '#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe',
                '#43e97b', '#38f9d7', '#ffecd2', '#fcb69f', '#a8edea', '#fed6e3',
                '#d299c2', '#fef9d7', '#667eea', '#764ba2'
            ];
            
            if (categoryChart) {
                categoryChart.destroy();
            }
            
            categoryChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: sortedCategories.map(([category]) => category),
                    datasets: [{
                        data: sortedCategories.map(([, amount]) => amount),
                        backgroundColor: colors.slice(0, sortedCategories.length),
                        borderColor: '#fff',
                        borderWidth: 2,
                        hoverOffset: 10
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                usePointStyle: true,
                                padding: 20,
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((sum, value) => sum + value, 0);
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `${context.label}: â‚¬${context.parsed.toFixed(2)} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }
        
        function getCategory(description) {
            const desc = description.toLowerCase();
            if (desc.includes('mcdonald') || desc.includes('pizza') || desc.includes('restaurant') || desc.includes('deli')) {
                return 'Food & Dining';
            } else if (desc.includes('spotify') || desc.includes('netflix') || desc.includes('cinema') || desc.includes('concert')) {
                return 'Entertainment';
            } else if (desc.includes('bookstore') || desc.includes('book')) {
                return 'Books & Education';
            } else if (desc.includes('zara') || desc.includes('clothing')) {
                return 'Shopping & Clothing';
            } else if (desc.includes('tech') || desc.includes('google')) {
                return 'Technology';
            } else if (desc.includes('lidl') || desc.includes('supermarket') || desc.includes('grocery')) {
                return 'Groceries';
            } else if (desc.includes('parking') || desc.includes('transport')) {
                return 'Transportation';
            } else if (desc.includes('rent') || desc.includes('monthly')) {
                return 'Housing';
            } else if (desc.includes('payroll') || desc.includes('salary')) {
                return 'Income';
            } else {
                return 'Other';
            }
        }
        
        function generateSuggestions() {
            const suggestions = [];
            const expenses = transactionData.filter(t => t.type === 'debit');
            const totalExpenses = expenses.reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            // Food spending analysis
            const foodExpenses = expenses.filter(t => 
                t.description.toLowerCase().includes('mcdonald') || 
                t.description.toLowerCase().includes('pizza') ||
                t.description.toLowerCase().includes('restaurant')
            ).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            if (foodExpenses > 200) {
                suggestions.push({
                    category: 'Food & Dining',
                    text: `You spent â‚¬${foodExpenses.toFixed(2)} on fast food and dining out. Consider cooking at home more often - you could save approximately â‚¬${(foodExpenses * 0.6).toFixed(2)} per month by reducing dining out by 60%.`
                });
            }
            
            // Entertainment spending
            const entertainmentExpenses = expenses.filter(t => 
                t.description.toLowerCase().includes('spotify') || 
                t.description.toLowerCase().includes('netflix') ||
                t.description.toLowerCase().includes('cinema')
            ).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            if (entertainmentExpenses > 100) {
                suggestions.push({
                    category: 'Entertainment',
                    text: `Your entertainment subscriptions and activities cost â‚¬${entertainmentExpenses.toFixed(2)}. Review your subscriptions - canceling unused services could save you â‚¬${(entertainmentExpenses * 0.3).toFixed(2)} monthly.`
                });
            }
            
            // Shopping analysis
            const shoppingExpenses = expenses.filter(t => 
                t.description.toLowerCase().includes('zara') || 
                t.description.toLowerCase().includes('bookstore') ||
                t.description.toLowerCase().includes('tech')
            ).reduce((sum, t) => sum + Math.abs(t.amount), 0);
            
            if (shoppingExpenses > 300) {
                suggestions.push({
                    category: 'Shopping',
                    text: `You spent â‚¬${shoppingExpenses.toFixed(2)} on shopping and books. Consider implementing a 24-hour wait rule for non-essential purchases - this could reduce impulse buying by approximately â‚¬${(shoppingExpenses * 0.25).toFixed(2)}.`
                });
            }
            
            // Daily spending pattern
            const avgDaily = totalExpenses / Math.max(1, getDaysBetween(transactionData[0].date, transactionData[transactionData.length - 1].date));
            if (avgDaily > 50) {
                suggestions.push({
                    category: 'Daily Spending',
                    text: `Your average daily spending is â‚¬${avgDaily.toFixed(2)}. Setting a daily budget of â‚¬${(avgDaily * 0.8).toFixed(2)} could help you save â‚¬${(avgDaily * 0.2 * 30).toFixed(2)} per month.`
                });
            }
            
            // Frequency analysis
            const frequentVendors = {};
            expenses.forEach(t => {
                const vendor = t.description.split(' ')[0];
                frequentVendors[vendor] = (frequentVendors[vendor] || 0) + 1;
            });
            
            const mostFrequent = Object.entries(frequentVendors).sort((a, b) => b[1] - a[1])[0];
            if (mostFrequent && mostFrequent[1] > 5) {
                suggestions.push({
                    category: 'Spending Habits',
                    text: `You made ${mostFrequent[1]} transactions with ${mostFrequent[0]}. Consider bulk purchasing or finding alternatives to reduce transaction frequency and potentially save on fees.`
                });
            }
            
            // General savings suggestion
            suggestions.push({
                category: 'Savings Goal',
                text: `Based on your spending pattern, you could potentially save â‚¬${(totalExpenses * 0.15).toFixed(2)} by implementing the 50/30/20 rule: 50% needs, 30% wants, 20% savings. This would create a monthly savings goal of â‚¬${(totalExpenses * 0.2).toFixed(2)}.`
            });
            
            // Display suggestions
            const container = document.getElementById('suggestions-container');
            container.innerHTML = suggestions.map(suggestion => `
                <div class="suggestion-item fade-in">
                    <div class="suggestion-category">${suggestion.category}</div>
                    <div class="suggestion-text">${suggestion.text}</div>
                </div>
            `).join('');
        }
    </script>
</body>
</html>